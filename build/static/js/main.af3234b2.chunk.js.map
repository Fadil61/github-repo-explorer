{"version":3,"sources":["context/context.js","components/SearchForm.js","components/SingleRepo.js","components/Loading.js","components/UsersList.js","components/SearchSummary.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","ROOT_URL","CLIENT_ID","process","REACT_APP_GITHUB_CLIENT_ID","CLIENT_SECRET","REACT_APP_GITHUB_CLIENT_SECRET","GithubContext","React","createContext","GithubProvider","children","useState","isLoading","setIsLoading","isRepoLoading","setIsRepoLoading","searchTerm","setSearchTerm","githubUsers","setGithubUsers","repos","setRepos","showSearchSummary","setShowSearchSummary","searchedUser","setSearchedUser","searchGithubUsers","user","fetch","response","json","userResponse","usersList","items","slice","console","log","searchRepos","login","repoResponse","Provider","value","useGithubContext","useContext","Wrapper","styled","section","SearchForm","searchValue","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","type","placeholder","ref","onChange","target","SingleRepo","name","description","stargazers_count","div","Loading","UsersList","clicked","setClicked","handleClick","index","toggle","map","item","Fragment","onClick","repo","id","SearchSummary","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af3234b2.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nrequire(\"dotenv\").config();\n\nconst ROOT_URL = \"https://api.github.com\";\nconst CLIENT_ID = process.env.REACT_APP_GITHUB_CLIENT_ID;\nconst CLIENT_SECRET = process.env.REACT_APP_GITHUB_CLIENT_SECRET;\n\n//access to Provider:\nconst GithubContext = React.createContext();\n\n//return the context provider that will wrap our whole app and provide access to state:\nconst GithubProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRepoLoading, setIsRepoLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [githubUsers, setGithubUsers] = useState([]);\n  const [repos, setRepos] = useState([]);\n  const [showSearchSummary, setShowSearchSummary] = useState(false);\n  const [searchedUser, setSearchedUser] = useState(\"\");\n\n  //passed down this function in values as we'll use that in the SearchForm\n  const searchGithubUsers = async (user) => {\n    setIsLoading(true);\n    const response = await fetch(\n      `${ROOT_URL}/search/users?q=${user}in:login&per_page=5?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n    );\n    const userResponse = await response.json();\n    if (userResponse) {\n      const usersList = userResponse.items.slice(0, 5);\n      setGithubUsers(usersList);\n    } else {\n      console.log(\"there is no user with that username\");\n    }\n    setIsLoading(false);\n    setShowSearchSummary(true);\n  };\n\n  //pass down this function in values so that we can use it in the UsersList.js:\n  const searchRepos = async (login) => {\n    setIsRepoLoading(true);\n    const response = await fetch(\n      `${ROOT_URL}/users/${login}/repos?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n    );\n    const repoResponse = await response.json();\n    if (repoResponse) {\n      setRepos(repoResponse);\n      setIsRepoLoading(false);\n      setShowSearchSummary(false);\n    } else {\n      console.log(\"there are no repos for this user\");\n    }\n  };\n\n  return (\n    <GithubContext.Provider\n      value={{\n        isLoading,\n        isRepoLoading,\n        searchTerm,\n        setSearchTerm,\n        githubUsers,\n        searchGithubUsers,\n        repos,\n        searchRepos,\n        showSearchSummary,\n        searchedUser,\n        setSearchedUser,\n      }}\n    >\n      {children}\n    </GithubContext.Provider>\n  );\n};\nexport { GithubProvider };\nexport const useGithubContext = () => {\n  return useContext(GithubContext);\n};\n","import { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useGithubContext } from \"../context/context\";\n\nconst SearchForm = () => {\n  //get things from global context:\n  const { searchGithubUsers, isLoading, setSearchedUser } = useGithubContext();\n\n  //local state for onChange while user types search term:\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  //useref used for focus on search:\n  const searchValue = useRef(\"\");\n\n  //focus on search form when app loads:\n  useEffect(() => {\n    searchValue.current.focus();\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (searchTerm) {\n      setSearchedUser(searchTerm);\n      searchGithubUsers(searchTerm);\n    }\n  };\n  return (\n    <Wrapper className=\"section\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-control\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter username\"\n            value={searchTerm}\n            ref={searchValue}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n          {!isLoading && <button type=\"submit\">Search</button>}\n        </div>\n      </form>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.section`\n  .form-control {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    input {\n      font-family: default;\n      font-size: var(--font-size-m);\n      width: 100%;\n      border: 1px solid;\n      border-color: var(--clr-dark-grey);\n      color: var(--clr-primary-black);\n      background-color: var(--clr-light-grey);\n      padding: 0.5rem 0.5rem;\n      margin: 0 var(--margin-l) var(--margin-l);\n      border-radius: 2px;\n    }\n    input:focus {\n      border-color: var(--clr-dark-grey);\n      outline: none;\n    }\n\n    input::placeholder {\n      color: var(--clr-darkest-grey);\n      font-family: default;\n      font-size: var(--font-size-m);\n    }\n\n    button {\n      border-radius: 2px;\n      width: 100%;\n      border: 1px solid;\n      border-color: var(--clr-primary-blue);\n      background-color: var(--clr-primary-blue);\n      color: var(--clr-light-grey);\n      font-family: default;\n      font-size: var(--font-size-m);\n      padding: 0.5rem 0.5rem;\n      margin: 0 var(--margin-l);\n      cursor: pointer;\n      transition: all 0.3s linear;\n      &:hover {\n        background-color: var(--clr-dark-blue);\n        color: var(--clr-primary-white);\n      }\n    }\n  }\n`;\nexport default SearchForm;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FaStar } from \"react-icons/fa\";\n\nconst SingleRepo = ({ name, description, stargazers_count }) => {\n  return (\n    <Wrapper className=\"section\">\n      <h3 className=\"title\">{name}</h3>\n      <p className=\"description\">{description}</p>\n      <p className=\"stars\">{stargazers_count}</p>\n      <FaStar className=\"icon\" />\n    </Wrapper>\n  );\n};\n\nexport default SingleRepo;\n\nconst Wrapper = styled.div`\n  margin: var(--margin-sm) 0 var(--margin-sm) var(--margin-l);\n  padding: 0.6rem 0.4rem;\n  background-color: var(--clr-darker-grey);\n  display: grid;\n  @media only screen and (min-width: 401px) {\n    grid-template-columns: 80% 10% 10%;\n  }\n  align-items: center;\n  :first-child {\n    margin: var(--margin-xs) 0 var(--margin-sm) var(--margin-l);\n  }\n  :last-child {\n    margin: var(--margin-sm) 0 0 var(--margin-l);\n  }\n\n  .title {\n    grid-column: 1 / 2;\n    margin-bottom: 2px;\n    word-wrap: break-word;\n    word-break: break-word;\n  }\n\n  .description {\n    grid-column: 1 / 2;\n    word-wrap: break-word;\n    //to prevent long words (e.g hyperlinks) from going over the page:\n    word-break: break-word;\n  }\n\n  .stars {\n    grid-column: 2 / 3;\n    grid-row: 1 / 2;\n    justify-self: end;\n    padding-top: 2px;\n    font-weight: 900;\n    margin-bottom: 2px;\n  }\n\n  .icon {\n    grid-column: 3 / 4;\n    grid-row: 1 / 2;\n    justify-self: center;\n    margin-bottom: 2px;\n  }\n  //make responsive for smaller mobile screens:\n  @media only screen and (max-width: 400px) {\n    .section {\n      grid-template-columns: 1fr, 1fr;\n    }\n    .title {\n      grid-column: 1 / 3;\n      grid-row: 1 / 2;\n      text-align: center;\n      font-size: 1rem;\n      margin-bottom: 4px;\n    }\n    .description {\n      grid-column: 1 / 3;\n      grid-row: 2 / 3;\n      text-align: center;\n      font-size: 0.9rem;\n      margin-bottom: 4px;\n    }\n    .stars {\n      grid-column: 1 / 2;\n      grid-row: 3 / 4;\n      margin-right: 3px;\n      margin-top: 1px;\n    }\n    .icon {\n      grid-column: 2 / 3;\n      grid-row: 3 / 4;\n      justify-self: start;\n      margin-left: 3px;\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Loading = () => {\n  return <Wrapper></Wrapper>;\n};\n\nexport default Loading;\n\nconst Wrapper = styled.div`\n  border: 1.6rem solid var(--clr-light-grey);\n  border-top: 1.6rem solid var(--clr-primary-blue);\n  border-radius: 50%;\n  width: 12rem;\n  height: 12rem;\n  animation: spin 2s linear infinite;\n  margin: var(--margin-xl) auto;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { MdKeyboardArrowDown } from \"react-icons/md\";\nimport { useGithubContext } from \"../context/context\";\nimport SingleRepo from \"./SingleRepo\";\nimport Loading from \"./Loading\";\n\nfunction UsersList() {\n  //destructuring, getting data/ global state from context:\n  const { isRepoLoading, repos, githubUsers, searchRepos } = useGithubContext();\n\n  //local state for accordion functionality:\n  const [clicked, setClicked] = useState(false);\n\n  const toggle = (index) => {\n    // if clicked username is already active, then close it:\n    if (clicked === index) {\n      return setClicked(null);\n    }\n    //otherwise set clicked to actual value which ends up opening it:\n    setClicked(index);\n  };\n\n  const handleClick = (index, login) => {\n    searchRepos(login);\n    toggle(index);\n  };\n\n  //mapping through users data and displaying each user login:\n  return (\n    <div>\n      {githubUsers.map((item, index) => {\n        return (\n          <React.Fragment key={item.id}>\n            <Wrapper onClick={() => handleClick(index, item.login)}>\n              <h3 className=\"login\">{item.login}</h3>\n              <MdKeyboardArrowDown\n                className={`${\n                  clicked === index ? \"arrow-down arrow\" : \"arrow\"\n                }`}\n              />\n            </Wrapper>\n            {clicked === index ? (\n              <div>\n                {isRepoLoading ? (\n                  <Loading />\n                ) : repos < 1 ? (\n                  <div>\n                    <p>There are no repositories for this user</p>\n                  </div>\n                ) : (\n                  /* mapping through repos for each user and displaying them: */\n                  repos.map((repo) => {\n                    return <SingleRepo key={repo.id} {...repo} />;\n                  })\n                )}\n              </div>\n            ) : null}\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  border: 1px solid;\n  border-color: var(--clr-dark-grey);\n  color: var(--clr-primary-black);\n  background-color: var(--clr-light-grey);\n  padding: 0.4rem 0.3rem;\n  margin: var(--margin-m) 0;\n  border-radius: 2px;\n  cursor: pointer;\n  :first-child {\n    margin: var(--margin-sm) 0;\n  }\n\n  .login {\n    font-weight: 400;\n    font-size: var(--font-size-m);\n  }\n\n  .arrow {\n    font-size: 1.4rem;\n    stroke-width: 0.02rem;\n    cursor: pointer;\n    transition: all 0.2s linear;\n  }\n\n  .arrow-down {\n    transform: rotate(180deg);\n  }\n`;\n\nexport default UsersList;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useGithubContext } from \"../context/context\";\n\nconst SearchSummary = () => {\n  const { searchedUser, githubUsers } = useGithubContext();\n  return (\n    <Wrapper>\n      {githubUsers < 1 ? (\n        <p>No users found with \"{searchedUser}\"</p>\n      ) : (\n        <p>Showing users with \"{searchedUser}\" </p>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default SearchSummary;\n\nconst Wrapper = styled.div`\n  margin: var(--margin-m) 0 var(--margin-xs);\n  color: var(--clr-darkest-grey);\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SearchForm from \"./components/SearchForm\";\nimport UsersList from \"./components/UsersList\";\nimport Loading from \"./components/Loading\";\nimport SearchSummary from \"./components/SearchSummary\";\nimport { useGithubContext } from \"./context/context\";\n\nfunction App() {\n  const { isLoading, showSearchSummary } = useGithubContext();\n  if (isLoading) {\n    return (\n      <Wrapper>\n        <div className=\"container\">\n          <SearchForm />\n          <Loading />\n        </div>\n      </Wrapper>\n    );\n  }\n  return (\n    <Wrapper>\n      <div className=\"container\">\n        <SearchForm />\n        {showSearchSummary && <SearchSummary />}\n        <UsersList />\n      </div>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  .container {\n    margin: var(--margin-l);\n    background-color: var(--clr-primary-white);\n    display: grid;\n    justify-content: center;\n    grid-template-columns: 30%;\n    @media only screen and (max-width: 1300px) {\n      grid-template-columns: 40%;\n    }\n    @media only screen and (max-width: 950px) {\n      grid-template-columns: 50%;\n    }\n    @media only screen and (max-width: 650px) {\n      grid-template-columns: 80%;\n    }\n    @media only screen and (max-width: 450px) {\n      grid-template-columns: 100%;\n      margin: var(--margin-sm);\n    }\n\n    //grid-template-columns: 18rem;\n    //grid-template-columns: minmax(15rem, 30%);\n  }\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { GithubProvider } from \"./context/context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GithubProvider>\n      <App />\n    </GithubProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}